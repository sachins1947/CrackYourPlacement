
class Solution {
    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
        List<List<Integer>> x = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        inorder(root, list);
        int j = 0;
        while (j < queries.size()) {
            x.add(new ArrayList<>()); 
           int low = 0;
           int high= list.size()-1;
           int key = queries.get(j);
          if(key>list.get(high)){
             x.get(j).add(list.get(high));
             x.get(j).add(-1);
             j++;
             continue;
          }
          if(key<list.get(low)){
            x.get(j).add(-1);
            x.get(j).add(list.get(low));
            j++;
            continue;
          }
           while(low<=high){
            int mid = (low+high)/2;
            if(list.get(mid)==key){
              x.get(j).add(list.get(mid));
              x.get(j).add(list.get(mid));
              break;     
            }
            else if(list.get(mid)<key && list.get(mid+1)>key){
                 x.get(j).add(list.get(mid));
                 x.get(j).add(list.get(mid+1));
                 break;
            }
            else if(list.get(mid)>key){
             high= mid-1;
            }
            else{
             low = mid+1;
            }
           } 
            j++;
        }
        
        return x;
    }

    void inorder(TreeNode root, List<Integer> list) {
        if (root != null) {
            inorder(root.left, list);
            list.add(root.val);
            inorder(root.right, list);
        }
    }
}
