/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        if(root.left==null && root.right==null) return root;
        Queue<Node> q= new LinkedList<>();
        q.add(root);
             Node prev = null;
        while(!q.isEmpty()){
            int size = q.size();
        for(int i=0;i<size;i++){
            Node cur = q.poll();
             if(prev!=null) prev.next =cur.left;
             cur.left.next = cur.right;
             if(cur.left!=null && cur.left.left!=null) q.add(cur.left);
             if(cur.right!=null && cur.right.right!=null) q.add(cur.right);
             prev = cur.right; 
        }
        prev= null;
        }
        return root;
    }
}

// optimize one
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Node leftmost=  root;
        while(leftmost.left!=null){
           Node cur = leftmost;
           while(cur!=null){
            cur.left.next = cur.right;
            if(cur.next!=null){
             cur.right.next =cur.next.left;
            }
            cur = cur.next;
           }
           leftmost = leftmost.left;
        }
        return root;
    }
}
