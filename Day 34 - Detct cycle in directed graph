class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
      boolean vis[] = new boolean[V];
      boolean pathvis[] = new boolean[V];
      for(int i=0;i<V;i++){
          if(!vis[i]){
        if(dfs(i,vis,pathvis,adj)==true){
            return true;
        }
          }
      }
      return false;
    }
    boolean dfs(int node,boolean vis[],boolean pathvis[],ArrayList<ArrayList<Integer>> adj){
        vis[node]=true;
        pathvis[node] =true;
        for(Integer it : adj.get(node)){
            if(!vis[it]){
              if(dfs(it,vis,pathvis,adj)==true){
                  return true;
              }
            }
            else if(pathvis[it]==true){
                return true;
            }
        }
        pathvis[node] =false;
        return false;
    }
}
