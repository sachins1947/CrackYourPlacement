class Solution {
    public int longestSquareStreak(int[] a) {
        Set<Long> set = new HashSet<>();
        Set<Long> sub = new HashSet<>();
        long streak = -1;
        for(int i=0;i<a.length;i++){
            set.add((long)a[i]);
        }
         for(int i=0;i<a.length;i++){
         long square = a[i]*a[i];
         if(set.contains(square)){
            sub.add((long)a[i]);
            sub.add(square);
         }
      }
      List<Long> list = new ArrayList<>(sub);
      Collections.sort(list);
      for(int i=0;i<list.size();i++){
         
       long count = countstreak(list.get(i),list);
         streak = Math.max(streak,count);
      }
      if(streak==1) return -1;
    return (int)streak;
    }
   long  countstreak(long n, List<Long> list){
     if(!list.contains(n*n)) return 1;
     return countstreak(n*n,list)+1;
    }
}
