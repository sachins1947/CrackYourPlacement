class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        ArrayList<ArrayList<Integer>> x = new ArrayList<>();
        ArrayList<Integer> list = new ArrayList<>();
        int n = graph.length;
        boolean vis[] = new boolean[n];
        boolean pathvis[] = new boolean[n];
        
        for(int i=0;i<n;i++){
             x.add(new ArrayList<>());
           for(int j=0;j<graph[i].length;j++){
             x.get(i).add(graph[i][j]);
           }
        }
        System.out.println(x);
        for(int i=0;i<n;i++){
            if(!vis[i]){
     boolean flag=  bfs(i,x,list,vis,pathvis);
            }
        }
        Collections.sort(list);
        return list;
    }
    boolean bfs(int node,ArrayList<ArrayList<Integer>> x,ArrayList<Integer> list,boolean vis[],boolean pathvis[]){
       vis[node] = true;
       pathvis[node] =true;
        for(Integer it : x.get(node)){
            if(!vis[it]){
          if(bfs(it,x,list,vis,pathvis)==false){
            return false;
          }
            }
            else if(pathvis[it]==true){
                return false;
            }
    }
    list.add(node);
    pathvis[node] =false;
    return true;
}}
