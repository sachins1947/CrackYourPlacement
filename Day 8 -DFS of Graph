class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
       ArrayList<Integer> list = new ArrayList<>();
        boolean vis[] = new boolean[V];
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        vis[0] =true;
        list.add(0);
         dfs(vis,adj,list,q);
         return list;
    }
    void dfs(boolean vis[],ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> list,Queue<Integer> q ){
        if(q.isEmpty()){
            return;
        }
         int node = q.poll();
        for(Integer it :adj.get(node)){
            if(!vis[it]){
               list.add(it);
               vis[it]= true;
               q.add(it);
             dfs(vis,adj,list,q);
            }
        }
    }
}
