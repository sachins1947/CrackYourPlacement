class Solution {
    public int numIslands(char[][] grid) {
    int direction[][] ={{-1, 0},{1, 0},{0, -1},{0, 1}};
    int n = grid.length;
    int m = grid[0].length;
    int island_count = 0;
    boolean vis[][] = new boolean[n][m];
     for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
         if(grid[i][j]=='1' && !vis[i][j]){
            dfs(i,j,vis,grid,direction,n,m);
            island_count++;
         }
        }
     }
     return island_count;
    }
    void dfs(int row,int col,boolean vis[][],char[][] grid, int direction[][],int n,int m){
        vis[row][col] =true;
        for(int[] dir : direction){
            int nrow = row + dir[0];
            int ncol = col + dir[1];
     if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && !vis[nrow][ncol]){
         dfs(nrow,ncol,vis,grid,direction,n,m);
     }
        }
    }
}
